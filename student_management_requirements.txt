
### 生徒情報管理機能の必要な情報

1. 基本情報
   - 生徒ID (自動生成または手動入力)
   - 氏名 (姓・名)
   - 性別
   - 生年月日
   - 学年
   - 学校名

2. 連絡先情報
   - 保護者の名前
   - 保護者の電話番号
   - 保護者のメールアドレス
   - 住所
   - LINEのID
   - LINE登録者 (生徒本人、保護者など)

3. お知らせ情報
   - お知らせの配信の有無
   - お知らせの送付の有無

4. 兄弟情報
   - 兄弟の生徒名

5. 学習情報
   - 登録コース
   - 授業スケジュール
   - 成績・進捗状況
   - 宿題の提出状況

6. 検定および合格実績
   - 英検合格級
   - 数検合格級
   - 高校合格実績
   - 大学合格実績

7. その他情報
   - 入塾日
   - 備考・メモ
   - アレルギーや特別な配慮事項

### データモデルの設計

各カテゴリーごとにFirestoreのコレクションを分けるため、以下のようにデータモデルを設計します。

```javascript
const studentSchema = {
  studentId: '', // 自動生成
  firstName: '',
  lastName: '',
  gender: '',
  dateOfBirth: '',
  grade: '',
  schoolName: '',
  enrollmentDate: '',
  notes: '',
  specialConsiderations: ''
};

const contactInfoSchema = {
  studentId: '',
  guardianName: '',
  guardianPhone: '',
  guardianEmail: '',
  address: '',
  lineId: '',
  lineRegisteredBy: ''
};

const notificationInfoSchema = {
  studentId: '',
  notificationSent: false,
  notificationReceived: false
};

const siblingInfoSchema = {
  studentId: '',
  siblingNames: []
};

const learningInfoSchema = {
  studentId: '',
  course: '',
  schedule: '',
  grades: '',
  homeworkStatus: ''
};

const achievementsSchema = {
  studentId: '',
  eikenLevel: '',
  sukenLevel: '',
  highSchoolAdmissions: '',
  universityAdmissions: ''
};
```

### フロントエンドフォームの作成

Reactで生徒情報を入力するためのフォームを作成し、各情報を別々のコレクションに保存します。

#### コンポーネント分割

1. 基本情報コンポーネント (BasicInfo.js)
```jsx
import React from 'react';
import styled from 'styled-components';

const Container = styled.div`
  margin-bottom: 20px;
`;

const BasicInfo = ({ student, handleChange }) => (
  <Container>
    <label>First Name:</label>
    <input type="text" name="firstName" value={student.firstName} onChange={handleChange} required />
    <label>Last Name:</label>
    <input type="text" name="lastName" value={student.lastName} onChange={handleChange} required />
    {/* その他の基本情報 */}
  </Container>
);

export default BasicInfo;
```

2. 連絡先情報コンポーネント (ContactInfo.js)
```jsx
import React from 'react';
import styled from 'styled-components';

const Container = styled.div`
  margin-bottom: 20px;
`;

const ContactInfo = ({ student, handleChange }) => (
  <Container>
    <label>Guardian Name:</label>
    <input type="text" name="guardianName" value={student.guardianName} onChange={handleChange} />
    <label>Line ID:</label>
    <input type="text" name="lineId" value={student.lineId} onChange={handleChange} />
    <label>Line Registered By:</label>
    <input type="text" name="lineRegisteredBy" value={student.lineRegisteredBy} onChange={handleChange} />
  </Container>
);

export default ContactInfo;
```

3. 兄弟情報コンポーネント (SiblingInfo.js)
```jsx
import React from 'react';
import styled from 'styled-components';

const Container = styled.div`
  margin-bottom: 20px;
`;

const SiblingInfo = ({ student, handleSiblingChange, addSibling }) => (
  <Container>
    {student.siblingNames.map((sibling, index) => (
      <div key={index}>
        <label>Sibling Name:</label>
        <input type="text" value={sibling} onChange={(e) => handleSiblingChange(index, e)} />
      </div>
    ))}
    <button type="button" onClick={addSibling}>Add Sibling</button>
  </Container>
);

export default SiblingInfo;
```

4. メインフォーム (StudentForm.js)
```jsx
import React, { useState } from 'react';
import firestore from './firebaseConfig';
import BasicInfo from './BasicInfo';
import ContactInfo from './ContactInfo';
import SiblingInfo from './SiblingInfo';

const StudentForm = () => {
  const [student, setStudent] = useState({
    firstName: '',
    lastName: '',
    gender: '',
    dateOfBirth: '',
    grade: '',
    schoolName: '',
    enrollmentDate: '',
    notes: '',
    specialConsiderations: '',
    guardianName: '',
    guardianPhone: '',
    guardianEmail: '',
    address: '',
    lineId: '',
    lineRegisteredBy: '',
    notificationSent: false,
    notificationReceived: false,
    siblingNames: [''],
    course: '',
    schedule: '',
    grades: '',
    homeworkStatus: '',
    eikenLevel: '',
    sukenLevel: '',
    highSchoolAdmissions: '',
    universityAdmissions: ''
  });

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setStudent(prevState => ({
      ...prevState,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleSiblingChange = (index, e) => {
    const newSiblings = [...student.siblingNames];
    newSiblings[index] = e.target.value;
    setStudent(prevState => ({
      ...prevState,
      siblingNames: newSiblings
    }));
  };

  const addSibling = () => {
    setStudent(prevState => ({
      ...prevState,
      siblingNames: [...prevState.siblingNames, '']
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    // 各コレクションへの保存ロジック
    try {
      const studentRef = await firestore.collection('students').add({
        firstName: student.firstName,
        lastName: student.lastName,
        gender: student.gender,
        dateOfBirth: student.dateOfBirth,
        grade: student.grade,
        schoolName: student.schoolName,
        enrollmentDate: student.enrollmentDate,
        notes: student.notes,
        specialConsiderations: student.specialConsiderations
      });

      const studentId = studentRef.id;

      await firestore.collection('contactInfo').add({
        studentId: studentId,
        guardianName: student.guardianName,
        guardianPhone: student.guardianPhone,
        guardianEmail: student.guardianEmail,
        address: student.address,
        lineId: student.lineId,
        lineRegisteredBy: student.lineRegisteredBy
      });

      await firestore.collection('notificationInfo').add({
        studentId: studentId,
        notificationSent: student.notificationSent,
        notificationReceived: student.notificationReceived
      });

      await firestore.collection('siblingInfo').add({
        studentId: studentId,
        siblingNames: student.siblingNames
      });

      await firestore.collection('learningInfo').add({
        studentId: studentId,
        course: student.course,
        schedule: student.schedule,
        grades: student.grades,
        homeworkStatus: student.homeworkStatus
      });

      await firestore.collection('achievements').add({
        studentId: studentId,
        eikenLevel: student.eikenLevel,
        sukenLevel: student.sukenLevel,
        highSchoolAdmissions: student.highSchoolAdmissions,
        universityAdmissions: student.universityAdmissions
      });

      console.log("All documents written successfully");
    } catch (error) {
      console.error("Error adding document: ", error);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <BasicInfo student={student} handleChange={handleChange} />
      <ContactInfo student={student} handleChange={handleChange} />
      <SiblingInfo student={student} handleSiblingChange={handleSiblingChange} addSibling={addSibling} />
      {/* その他のコンポーネント */}
      <button type="submit">Submit</button>
    </form>
  );
};

export default StudentForm;
```

これで、生徒情報管理のためのフォームが、各情報を別々のコンポーネントに分割され、styled-componentsを使用してスタイルが適用されています。
